generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  fullName          String
  role              UserRole @default(STUDENT)
  preferredLanguage String   @default("en")
  avatarName        String?
  avatarStyle       String?
  
  // Gamification
  level             Int      @default(1)
  xp                Int      @default(0)
  streak            Int      @default(0)
  lastLoginDate     DateTime?
  
  // Security
  emailVerified     Boolean  @default(false)
  twoFactorEnabled  Boolean  @default(false)
  failedLoginAttempts Int    @default(0)
  accountLockedUntil DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  moduleProgress    ModuleProgress[]
  badges            UserBadge[]
  achievements      UserAchievement[]
  dailyChallenges   DailyChallengeCompletion[]
  passwordResets    PasswordReset[]
  sessions          Session[]
  
  @@index([email])
}

enum UserRole {
  STUDENT
  PROFESSIONAL
  GENERAL_USER
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model Module {
  id          String  @id @default(cuid())
  slug        String  @unique
  title       String
  description String
  order       Int
  xpReward    Int
  icon        String
  isPublished Boolean @default(true)
  
  scenarios   Scenario[]
  progress    ModuleProgress[]
  
  @@index([slug])
  @@index([order])
}

model Scenario {
  id          String @id @default(cuid())
  moduleId    String
  title       String
  description String
  order       Int
  type        ScenarioType
  content     Json // Flexible JSON content for different scenario types
  
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@index([moduleId])
}

enum ScenarioType {
  STORY
  INTERACTIVE
  MINI_GAME
  ASSESSMENT
  SIMULATION
}

model ModuleProgress {
  id                String   @id @default(cuid())
  userId            String
  moduleId          String
  status            ProgressStatus @default(NOT_STARTED)
  currentScenario   Int      @default(0)
  score             Int?
  attempts          Int      @default(0)
  timeSpent         Int      @default(0) // in seconds
  completedAt       DateTime?
  savedAnswers      Json?    // Store user's answers across scenarios
  xpAwarded         Boolean  @default(false) // Track if 250 XP already awarded
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, moduleId])
  @@index([userId])
  @@index([moduleId])
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PASSED
}

model Badge {
  id          String @id @default(cuid())
  slug        String @unique
  name        String
  description String
  icon        String
  category    BadgeCategory
  rarity      BadgeRarity
  
  userBadges UserBadge[]
  
  @@index([slug])
}

enum BadgeCategory {
  MODULE_COMPLETION
  STREAK
  ACHIEVEMENT
  SPECIAL
  CULTURAL
}

enum BadgeRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, badgeId])
  @@index([userId])
}

model Achievement {
  id          String @id @default(cuid())
  slug        String @unique
  name        String
  description String
  icon        String
  xpReward    Int
  requirement Json // Flexible requirements
  
  userAchievements UserAchievement[]
  
  @@index([slug])
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  progress      Int      @default(0)
  completed     Boolean  @default(false)
  completedAt   DateTime?
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@index([userId])
}

model DailyChallenge {
  id          String   @id @default(cuid())
  date        DateTime @unique
  title       String
  description String
  scenario    Json
  xpReward    Int
  
  completions DailyChallengeCompletion[]
  
  @@index([date])
}

model DailyChallengeCompletion {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  completed   Boolean  @default(false)
  score       Int?
  completedAt DateTime?
  
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge DailyChallenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, challengeId])
  @@index([userId])
}

model Leaderboard {
  id       String @id @default(cuid())
  userId   String
  period   LeaderboardPeriod
  rank     Int
  xp       Int
  week     Int?
  month    Int?
  year     Int
  
  @@unique([userId, period, week, month, year])
  @@index([period, week, month, year, rank])
}

enum LeaderboardPeriod {
  WEEKLY
  MONTHLY
  ALL_TIME
}
